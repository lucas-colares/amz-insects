scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names[-c(4,7)])+
labs(x="Proportion of forest",y="Area of the bounding box",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "right", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));SizeOrdPlt
SizeOrdPlt<-ggplot()+
geom_point(data=size_plt,aes(x=Area,y=log10(Size),color=Taxa,fill=Taxa,shape=Taxa))+
geom_smooth(data=size_plt,aes(x=Area,y=log10(Size),color=Taxa),method = "glm",method.args=list(family="quasipoisson"))+
facet_wrap(.~Taxa,scales = "free_y")+
scale_color_manual(values=my_cols[-c(4,7)],labels=fantasy_names[-c(4,7)])+
scale_fill_manual(values=my_cols[-c(4,7)],labels=fantasy_names[-c(4,7)])+
scale_linetype(labels=fantasy_names[-c(4,7)])+
theme_minimal()+
#scale_y_continuous(labels = c(0,10,100),breaks = c(0,1,2))+
#guides(color="none",fill="none",color="none",shape="none")+
scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names[-c(4,7)])+
labs(x="Proportion of forest",y="Area of the bounding box",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "none", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));SizeOrdPlt
AbunOrdPlt<-ggplot()+
geom_point(data=taxa_mat[taxa_mat$Abun<500,],aes(x=Area,y=log10(Abun+1),color=Taxa,fill=Taxa,shape=Taxa))+
geom_smooth(data=taxa_mat[taxa_mat$Abun<500,],aes(x=Area,y=log10(Abun+1),color=Taxa,linetype=Taxa),method = "glm",method.args=list(family="quasipoisson"))+
facet_wrap(.~Taxa,scales = "free_y",nrow = 2)+
scale_color_manual(values=my_cols,labels=fantasy_names)+
scale_fill_manual(values=my_cols,labels=fantasy_names)+
scale_linetype(labels=fantasy_names)+
theme_minimal()+
scale_y_continuous(labels = c(0,10,100),breaks = c(0,1,2))+
#guides(color="none",fill="none",color="none",shape="none")+
scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names)+
labs(x="Proportion of forest",y="Number of individuals",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "right", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));AbunOrdPlt
AbunOrdPlt<-ggplot()+
geom_point(data=taxa_mat[taxa_mat$Abun<500,],aes(x=Area,y=log10(Abun+1),color=Taxa,fill=Taxa,shape=Taxa))+
geom_smooth(data=taxa_mat[taxa_mat$Abun<500,],aes(x=Area,y=log10(Abun+1),color=Taxa,linetype=Taxa),method = "glm",method.args=list(family="quasipoisson"))+
facet_wrap(.~Taxa,scales = "free_y",nrow = 2)+
scale_color_manual(values=my_cols,labels=fantasy_names)+
scale_fill_manual(values=my_cols,labels=fantasy_names)+
scale_linetype(labels=fantasy_names)+
theme_minimal()+
scale_y_continuous(labels = c(0,10,100),breaks = c(0,1,2))+
#guides(color="none",fill="none",color="none",shape="none")+
scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names)+
labs(x="Proportion of forest",y="Number of individuals",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "none", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));AbunOrdPlt
SizeOrdPlt<-ggplot()+
geom_point(data=size_plt,aes(x=Area,y=log10(Size),color=Taxa,fill=Taxa,shape=Taxa))+
geom_smooth(data=size_plt,aes(x=Area,y=log10(Size),color=Taxa),method = "glm",method.args=list(family="quasipoisson"))+
facet_wrap(.~Taxa,scales = "free_y")+
scale_color_manual(values=my_cols[-c(4,7)],labels=fantasy_names[-c(4,7)])+
scale_fill_manual(values=my_cols[-c(4,7)],labels=fantasy_names[-c(4,7)])+
scale_linetype(labels=fantasy_names[-c(4,7)])+
theme_minimal()+
#scale_y_continuous(labels = c(0,10,100),breaks = c(0,1,2))+
#guides(color="none",fill="none",color="none",shape="none")+
scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names[-c(4,7)])+
labs(x="Proportion of forest",y="Area of the bounding box",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "none", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));SizeOrdPlt
AbunOrdPlt<-ggplot()+
geom_point(data=taxa_mat[taxa_mat$Abun<500,],aes(x=Area,y=log10(Abun+1),color=Taxa,fill=Taxa,shape=Taxa))+
geom_smooth(data=taxa_mat[taxa_mat$Abun<500,],aes(x=Area,y=log10(Abun+1),color=Taxa),method = "glm",method.args=list(family="quasipoisson"))+
facet_wrap(.~Taxa,scales = "free_y",nrow = 2)+
scale_color_manual(values=my_cols,labels=fantasy_names)+
scale_fill_manual(values=my_cols,labels=fantasy_names)+
scale_linetype(labels=fantasy_names)+
theme_minimal()+
scale_y_continuous(labels = c(0,10,100),breaks = c(0,1,2))+
#guides(color="none",fill="none",color="none",shape="none")+
scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names)+
labs(x="Proportion of forest",y="Number of individuals",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "none", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));AbunOrdPlt
SizeOrdPlt<-ggplot()+
geom_point(data=size_plt,aes(x=Area,y=log10(Size),color=Taxa,fill=Taxa,shape=Taxa))+
geom_smooth(data=size_plt,aes(x=Area,y=log10(Size),color=Taxa),method = "glm",method.args=list(family="quasipoisson"))+
facet_wrap(.~Taxa,scales = "free_y")+
scale_color_manual(values=my_cols[-c(4,7)],labels=fantasy_names[-c(4,7)])+
scale_fill_manual(values=my_cols[-c(4,7)],labels=fantasy_names[-c(4,7)])+
scale_linetype(labels=fantasy_names[-c(4,7)])+
theme_minimal()+
#scale_y_continuous(labels = c(0,10,100),breaks = c(0,1,2))+
#guides(color="none",fill="none",color="none",shape="none")+
scale_shape_manual(values=c(21,22,23,24,25,8,13),labels=fantasy_names[-c(4,7)])+
labs(x="Proportion of forest",y="Area of the bounding box",color="Biological\ngroup",fill="Biological\ngroup",shape="Biological\ngroup",linetype="Biological\ngroup")+
theme(legend.justification = "top",strip.text = element_text(size=12,family="sans",face = "bold",hjust = 0,vjust = 0.5),strip.background = element_rect(fill="transparent",color="transparent"), legend.text.align = 0,legend.title.align=0,legend.position = "none", legend.background = element_rect(fill="NA", colour = "NA"), legend.title = element_text(face="bold", family = "sans", colour = "black", size=12), legend.text = element_text(family ="sans", size=10), axis.text = element_text(family = "sans", colour = "black", size=12), axis.title = element_text(face="bold",family = "sans", size = 14));SizeOrdPlt
##### Arrange and save plots ----
ggsave(filename = "figures/abundance_order.tif",plot = AbunOrdLeg,units = "in",width = 14,height = 5,dpi = 600)
##### Arrange and save plots ----
ggsave(filename = "figures/abundance_order.tif",plot = AbunOrdPlt,units = "in",width = 14,height = 5,dpi = 600)
##### Arrange and save plots ----
ggsave(filename = "figures/abundance_order.tif",plot = AbunOrdPlt,units = "in",width = 12,height = 5,dpi = 600)
ggsave(filename = "figures/size_order.tif",plot = SizeOrdPlt,units = "in",width = 8,height = 5,dpi = 600)
??C_target
??beta_stand
cat("(((((((Brachycera:0.2,Nematocera:0.2):0.2,", "Trichoptera:0.4):0.2,Coleoptera:0.6):0.4,Hymenoptera:1.0):0.6,Hemiptera:1.6):0.6,Ephemeroptera:2.2):0.6);", file = "ex.tre", sep = "\n")
tree.ins <- read.tree("ex.tre")
###### Full setup ######
## Options ----
options(timeout=10800)
## Packages ----
if(require(reshape2)==FALSE){
install.packages("reshape2")
library(reshape2)
}
if(require(phytools)==FALSE){
install.packages("phytools")
library(phytools)
}
if(require(MoMAColors)==FALSE){
devtools::install_github("BlakeRMills/MoMAColors")
library(MoMAColors)
}
if(require(purrr)==FALSE){
install.packages("purrr")
library(purrr)
}
if(require(devtools)==FALSE){
install.packages("devtools")
library(devtools)
}
if(require(betaC)==FALSE){
devtools::install_github("betaCgit/betaC")
library(betaC)
}
if(require(gtable)==FALSE){
install.packages("gtable")
library(gtable)
}
if(require(landscapemetrics)==FALSE){
install.packages("landscapemetrics")
library(landscapemetrics)
}
if(require(ape)==FALSE){
install.packages("ape")
library(ape)
}
if(require(ggplot2)==FALSE){
install.packages("ggplot2")
library(ggplot2)
}
if(require(ggpubr)==FALSE){
install.packages("ggpubr")
library(ggpubr)
}
if(require(mgcv)==FALSE){
install.packages("mgcv")
library(mgcv)
}
if(require(rstatix)==FALSE){
install.packages("rstatix")
library(rstatix)
}
if(require(sf)==FALSE){
install.packages("sf")
library(sf)
}
if(require(imagerExtra)==FALSE){
install.packages("imagerExtra")
library(imagerExtra)
}
if(require(raster)==FALSE){
install.packages("raster")
library(raster)
}
if(require(vegan)==FALSE){
install.packages("vegan")
library(vegan)
}
if(require(XML)==FALSE){
install.packages("XML")
library(XML)
}
if(require(YOUtils)==FALSE){
devtools::install_github("https://github.com/lucas-colares/YOUtils")
library(YOUtils)
}
if(require(pbapply)==FALSE){
install.packages("pbapply")
library(pbapply)
}
if(require(magick)==FALSE){
install.packages("magick")
library(magick)
}
## Functions ----
# mask_segmentation
mask_segmentation <- function(imgs, destFolder, K=0.2, Blur=5, Resize=1, H=0.05, Margin=100){
pb = txtProgressBar(min = 0, max = length(imgs), initial = 0,style = 3)
for(IMAGE in 1:length(imgs)){
JJ_col_full=load.image(imgs[IMAGE])
#plot(JJ_col_full)
JJ_col_full_blur=isoblur(JJ_col_full,Blur)
#plot(JJ_col_full_blur)
JJ_col=resize(JJ_col_full_blur,
size_x=(width(JJ_col_full)/Resize),
size_y=(height(JJ_col_full)/Resize))
rm(JJ_col_full_blur)
grayscale(JJ_col)->JJ
#plot(JJ)
remove(JJ_col)
gc()
ThreshImg <- suppressWarnings(ThresholdAdaptive(JJ, K, windowsize = (max(c(height(JJ),width(JJ)))*10/100), range = c(0,255)))
#plot(ThreshImg)
remove(JJ)
gc()
ImgEro<-erode_square(ThreshImg,(10*(1/Resize)))
remove(ThreshImg)
ImgEro <- +(!ImgEro)
ImgEro>0->splt
gc()
splt<-clean(splt,(15/Resize))
#plot(splt)
sp <- try(split_connected(splt),silent = TRUE) #returns an imlist
if(is(sp)=="try-error"){
ImgEro>0->splt
sp <- split_connected(splt) #returns an imlist
}
remove(ImgEro)
remove(splt)
gc()
data.frame(matrix(NA,nrow=length(sp),ncol=4))->coords
colnames(coords)=c("xmin","xmax","ymin","ymax")
for(y in 1:length(sp)){
where((sp[[y]]>0))->lim
min(lim$x)->coords[y,1]
max(lim$x)->coords[y,2]
min(lim$y)->coords[y,3]
max(lim$y)->coords[y,4]
}
coords*Resize->coords
remove(sp)
gc()
spp_UPGMA <- hclust(vegdist(coords, "gower"), method="average"); spp_UPGMA
m <- cutree(spp_UPGMA, h = H);
coords$groups<-m
fileName<-substr(sapply(strsplit(imgs[IMAGE],"/"), tail, 1),1,nchar(sapply(strsplit(imgs[IMAGE],"/"), tail, 1))-4)
for(u in unique(coords$groups)){
(min(coords[coords$groups==u,1])-Margin)->MIN_X
(max(coords[coords$groups==u,2])+Margin)->MAX_X
(min(coords[coords$groups==u,3])-Margin)->MIN_Y
(max(coords[coords$groups==u,4])+Margin)->MAX_Y
imsub(JJ_col_full,x %inr% c(MIN_X, MAX_X), y %inr% c(MIN_Y, MAX_Y)) -> im
jpeg(paste0(destFolder,fileName,"_",u,".jpg"), width = width(im), height = height(im), "px")
par(mar = rep(0, 4))
plot(im,axes = FALSE)
dev.off()
}
remove(JJ_col_full)
gc()
setTxtProgressBar(pb,IMAGE)
}
}
#### Annotations
auto_annotation<-function(imgs, destFolder, Blur=1, K=0.2, Erode=5){
while(is.numeric(1)){
files<-dir(destFolder,pattern="*.xml")
if(length(files)!=0){
Classes<-{}
for(x in 1:length(files)){
xml <- xmlTreeParse(paste0(destFolder,files[x]))
root = xmlRoot(xml)
sel<-{}
for(y in 1:length(root)){
grep("object", root[[y]])->rep
if(is.na((rep[1]==1))==TRUE){
next
} else{
y->sel[[y]]
}
}
unlist(sel)->sel
for(y in 1:length(sel)){
Classes[[length(Classes)+1]]<-xmlValue(root[sel[y]]$object[1]$name)
}
}
NClass<-{}
for(x in unique(unlist(Classes))){
NClass[[length(NClass)+1]]<-cbind(x, length(grep(x, unlist(Classes))))
}
do.call("rbind",NClass)->NClass
data.frame(NClass)->NClass
NClass[order(NClass$x),]->NClass
colnames(NClass)=c("Taxa","N")
MenuOpt<-unlist(list("NEW TAXA","DELETE INDIVIDUAL","SKIP",paste0(NClass$Taxa," (",NClass$N,")")))
} else {
MenuOpt<-unlist(list("NEW TAXA","DELETE INDIVIDUAL","SKIP"))
}
x<-sample(imgs,1) #Sample a random image to annotate
while(!is.na(grep(paste0("^",gsub(".jpg","",sapply(strsplit(x,"/"),tail,1)),"$"),substr(dir(destFolder),1,(nchar(dir(destFolder))-4)))[1])){
x<-sample(imgs,1)
} # Check if you already saved that image
img<-load.image(x)
img_mod=isoblur(img,Blur)
grayscale(img_mod)->img_mod
ThreshImg <- suppressWarnings(ThresholdAdaptive(img_mod, K, windowsize = (max(c(height(img_mod),width(img_mod)))*10/100), range = c(0,255)))
rm(img_mod)
ImgEro<-erode_square(ThreshImg,Erode)
ImgEro <- +(!ImgEro)
rm(ThreshImg)
ImgEro>0->splt
splt<-clean(splt,max(c(height(img),width(img)))*1/100)
img_list=split_connected(splt)
remove(ImgEro)
remove(splt)
gc()
data.frame(matrix(NA,nrow=length(img_list),ncol=4))->coords
colnames(coords)=c("xmin","xmax","ymin","ymax")
for(y in 1:length(img_list)){
where((img_list[[y]]>0))->lim
min(lim$x)->coords[y,1]
max(lim$x)->coords[y,2]
min(lim$y)->coords[y,3]
max(lim$y)->coords[y,4]
}
remove(img_list)
gc()
op <- par(mar=rep(0,4))
par(op)
plot(img) -> img_plot
rect(img, xleft=coords$xmin, xright=coords$xmax, ybottom=coords$ymin, ytop=coords$ymax, col="green")
menu(c("Yes","No","Skip"),title = paste0("Are all individuals correctly marked?\n\nPath: ",getwd(),"/",gsub(sapply(strsplit(x,"/"),tail,1),"",x),"\n\n","Image name: ",sapply(strsplit(x,"/"),tail,1)))->marked
##### If SKIP ####
if(marked==3){
next
}
##### IF NO #####
if(marked==2){
browseURL("dependencies/labelImg-master/dist/labelImg.exe")
readline("Press ENTER when done")
xml <- xmlTreeParse(paste0(gsub(sapply(strsplit(x,"/"),tail,1),"",x),dir(gsub(sapply(strsplit(x,"/"),tail,1),"",x),pattern="*.xml")[grep(paste0("^",substr(sapply(strsplit(x,"/"),tail,1),1,(nchar(sapply(strsplit(x,"/"),tail,1))-4)),".xml$"),dir(gsub(sapply(strsplit(x,"/"),tail,1),"",x),pattern="*.xml"))]))
root = xmlRoot(xml)
sel<-{}
for(y in 1:length(root)){
grep("object", root[[y]])->rep
if(is.na((rep[1]==1))==TRUE){
next
} else{
y->sel[[y]]
}
}
unlist(sel)->sel
REMOVE<-{}
for(y in sel){
root[[y]][[5]][1]$xmin[1]$text->xmin
root[[y]][[5]][2]$ymin[1]$text->ymin
root[[y]][[5]][3]$xmax[1]$text->xmax
root[[y]][[5]][4]$ymax[1]$text->ymax
op <- par(mar=rep(0,4))
par(op)
plot(img) -> img_plot
rect(img, xleft=as.numeric(unlist(xmin)[2]), xright=as.numeric(unlist(xmax)[2]), ybottom=as.numeric(unlist(ymin)[2]), ytop=as.numeric(unlist(ymax)[2]), col="green")
menu(unlist(MenuOpt),title = paste("What is the taxa of this individual?",x))->qst1
if(qst1==1){
readline("Write the name of this taxa: ")->NAME
NAME->xmlValue(root[[y]][[1]][1]$text)
}
if(qst1==2){
REMOVE[[length(REMOVE)+1]]<-y
}
if(qst1==3){
break
}
if(qst1!=1&qst1!=2&qst1!=3){
gsub(r"{\s*\([^\)]+\)}","",unlist(MenuOpt[qst1]))->xmlValue(root[[y]][[1]][1]$text)
}
}
if(!is.null(unlist(REMOVE))){
if(length(REMOVE)==1){
root<-removeChildren(root,as.numeric(unlist(REMOVE)))
}
if(length(REMOVE)==2){
root<-removeChildren(root,as.numeric(unlist(REMOVE))[1],as.numeric(unlist(REMOVE))[2])
}
if(length(REMOVE)==3){
root<-removeChildren(root,as.numeric(unlist(REMOVE))[1],as.numeric(unlist(REMOVE))[2],as.numeric(unlist(REMOVE))[3])
}
if(length(REMOVE)==4){
root<-removeChildren(root,as.numeric(unlist(REMOVE))[1],as.numeric(unlist(REMOVE))[2],as.numeric(unlist(REMOVE))[3],as.numeric(unlist(REMOVE))[4])
}
}
if(length(grep("object",names(root)))==0){
next
} else {
file.copy(x,paste0(destFolder,sapply(strsplit(x,"/"),tail,1)))
saveXML(root,file=paste0(destFolder,gsub(".jpg",".xml",sapply(strsplit(x,"/"),tail,1))))
file.remove(gsub(".jpg",".xml",x))
}
}
##### IF YES ####
if(marked==1){
coords$taxa=NA
for(y in 1:nrow(coords)){
coords$xmin[y]->xmin
coords$ymin[y]->ymin
coords$xmax[y]->xmax
coords$ymax[y]->ymax
op <- par(mar=rep(0,4))
par(op)
plot(img) -> img_plot
rect(img, xleft=xmin, xright=xmax, ybottom=ymin, ytop=ymax, col="green")
menu(unlist(MenuOpt),title = paste("What is the taxa of this individual?",x))->qst1
if(qst1==1){
readline("Write the name of this taxa: ")->NAME
NAME->coords$taxa[y]
}
if(qst1==3){
break
}
if(qst1!=1&qst1!=2&qst1!=3){
gsub(r"{\s*\([^\)]+\)}","",unlist(MenuOpt[qst1]))->coords$taxa[y]
}
}
na.omit(coords)->coords
doc = newXMLDoc()
root = newXMLNode("annotation", doc = doc)
fldNode = newXMLNode("folder", destFolder, parent = root)
fileNode = newXMLNode("filename", sapply(strsplit(x,"/"), tail, 1), parent = root)
pathNode = newXMLNode("path",paste0(destFolder,sapply(strsplit(x,"/"), tail, 1)), parent = root)
srcNode = newXMLNode("source", parent = root)
dataNode = newXMLNode("database","Unknown", parent = srcNode)
sizeNode = newXMLNode("size", parent = root)
widthNode = newXMLNode("width",width(img), parent = sizeNode)
heightNode = newXMLNode("height",height(img), parent = sizeNode)
depthNode = newXMLNode("depth","3", parent = sizeNode)
segNode = newXMLNode("segmented","0", parent = root)
for (k in 1:nrow(coords)) {
objNode = newXMLNode("object", parent = root)
namNode = newXMLNode("name", coords$taxa[k], parent = objNode)
poseNode = newXMLNode("pose", "Unspecified", parent = objNode)
trnNode = newXMLNode("truncated", "0", parent = objNode)
dffNode = newXMLNode("difficult", "0", parent = objNode)
bbxNode = newXMLNode("bndbox", parent = objNode)
xmiNode = newXMLNode("xmin",coords$xmin[k], parent = bbxNode)
ymiNode = newXMLNode("ymin",coords$ymin[k], parent = bbxNode)
xmxNode = newXMLNode("xmax",coords$xmax[k], parent = bbxNode)
ymxNode = newXMLNode("ymax",coords$ymax[k], parent = bbxNode)
}
file.copy(x,paste0(destFolder,sapply(strsplit(x,"/"), tail, 1)))
saveXML(doc, file=paste0(destFolder,gsub(".jpg",".xml",sapply(strsplit(x,"/"), tail, 1))), sep="")
}
}
}
IoU<-function(mat){
data.frame(matrix(NA,nrow = nrow(mat),ncol = nrow(mat)))->dist.mat
rownames(dist.mat)=rownames(mat)
colnames(dist.mat)=rownames(mat)
for(r in 1:nrow(dist.mat)){
mat[rownames(mat)==rownames(dist.mat)[r],]->sel.r
for(c in 1:ncol(dist.mat)){
mat[rownames(mat)==rownames(dist.mat)[c],]->sel.c
intersection_width = min(c(sel.r$xmax, sel.c$xmax)) - max(c(sel.r$xmin, sel.c$xmin))
intersection_height = min(c(sel.r$ymax, sel.c$ymax)) - max(c(sel.r$ymin, sel.c$ymin))
intersection_area = intersection_width * intersection_height
box1_area = (sel.r$xmax - sel.r$xmin) * (sel.r$ymax - sel.r$ymin)
box2_area = (sel.c$xmax - sel.c$xmin) * (sel.c$ymax - sel.c$ymin)
union_area = (box1_area + box2_area) - intersection_area
iou = intersection_area / union_area
if(intersection_width <= 0 | intersection_height <= 0){
dist.mat[r,c]<-0
} else {
dist.mat[r,c]<-iou
}
}
}
return(as.dist(dist.mat))
}
IoU2<-function(mat1,mat2){
data.frame(matrix(NA,nrow = nrow(mat1),ncol = nrow(mat2)))->dist.mat
rownames(dist.mat)=rownames(mat1)
colnames(dist.mat)=rownames(mat2)
for(r in 1:nrow(dist.mat)){
mat1[rownames(mat1)==rownames(dist.mat)[r],]->sel.r
for(c in 1:ncol(dist.mat)){
mat2[rownames(mat2)==colnames(dist.mat)[c],]->sel.c
intersection_width = min(c(sel.r$xmax, sel.c$xmax)) - max(c(sel.r$xmin, sel.c$xmin))
intersection_height = min(c(sel.r$ymax, sel.c$ymax)) - max(c(sel.r$ymin, sel.c$ymin))
intersection_area = intersection_width * intersection_height
box1_area = (sel.r$xmax - sel.r$xmin) * (sel.r$ymax - sel.r$ymin)
box2_area = (sel.c$xmax - sel.c$xmin) * (sel.c$ymax - sel.c$ymin)
union_area = (box1_area + box2_area) - intersection_area
iou = intersection_area / union_area
if(intersection_width <= 0 | intersection_height <= 0){
dist.mat[r,c]<-0
} else {
dist.mat[r,c]<-iou
}
}
}
return(data.frame(expand.grid(rownames(dist.mat),colnames(dist.mat)),value=suppressMessages(reshape2::melt(dist.mat)[,2])))
}
ENS_fun <- function(Sn, n) {
equation <- function(S, Sn, n) {
abs(S * (1 - (1 - (1 / S)) ^ n) - Sn)
}
out <- optimize(
equation,
interval = c(Sn, 10000000),
Sn = Sn,
n = n
)
out = out$minimum
if (n == 1)
out = NA
return(out)
}
tree.ins <- read.tree("ex.tre")
plot(tree.ins)
size_ins = aggregate(insects$body_area,list(insects$class),max)[,2]
names(size_ins) = unique(insects$class)[order(unique(insects$class))]
K_result <- phylosig(tree.ins, size_ins, method = "K", test = TRUE)
print(K_result)
?phylosig
K_result <- phylosig(tree.ins, size_ins, method = "K", test = TRUE,niter = 9999)
print(K_result)
K_result <- phylosig(tree.ins, size_ins, method = "lambda", test = TRUE,niter = 9999)
print(K_result)
